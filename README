// Copyright (C) 2011 by Ross Korsky
//
// This software is released under the MIT License that follows
//
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE

 * Used to construct and compile SQL like 'FROM .. JOIN ..' statements into a 
 * javascript function which can then be used for multiple evaluations of
 * similar data sets.
 *
 * Supported joins:
 *   FROM       - (required) used as the base iterator target, every record
 *                is visited. If occurring more than once treated as CROSS.
 *   LEFT JOIN  - Return all rows from the left table, even if there are no 
 *                matches in the right table.
 *   INNER JOIN / JOIN - Return rows when there is at least one match in both
 *                       tables  
 *   CROSS JOIN - Cartesian product of the sets of rows from the joined tables.
 *                Each row from the first table is combined with each row from
 *                the second table and so on.
 *
 *
 * Directives:
 *   Directives are used to generate the javascript which will perform the join.
 *
 *   The directives content is considered 'trusted' and therefore directives are
 *   a possible JS injection vector (sanitize user input before directly
 *   creating directives).
 *
 *   The parse method may be used to create directives for you by using an SQL
 *   fragment like syntax.
 *   
 *   Directives have the following structure
 *     - join: One of 'from', 'left', 'inner', 'cross'
 *     - arg : Numeric, index of the function parameter which will be referenced
 *             by the alias established by 'as'. Does not need to be unique.
 *     - as  : Alias which will be used to refer to 'this' view of the specified
 *             function argument.
 *     - on  : Structured containing exactly two &lt;alias&gt;: &lt;field&gt;
 *             entries, one of which MUST be the same value as 'as'.
 *
 *  Notice:
 *    - arg#'s may be reused just as you can join a table on itself in SQL
 *    - aliases must be unique within a set of directives
 *    - only equality '=' is supported at this time
 *    - having a FROM statement is required
 *    - joins must have an ON statement that contains reference to the name
 *      aliased by 'as'
 *    - The parse method will throw Error's for common failure cases but this
 *      error checking may not catch all invalid cases.
 *    - Currently directives are not reordered by this system and the order 
 *      of directives is used to build the join function code. This means that, 
 *      for now, join dependency MUST be satisfied by the user by the order 
 *      of listing. 
 * 
 * 
 * The user provided 'selector' function:
 *   The selector function like a combination of an SQL SELECT clause and WHERE 
 *   clause. It is used by the compiled join function to perform record selection
 *   as well as creating a record 'view' or transformation.
 *   
 *   The selector function is called in the context of the current, joined, row.
 *   In other words this function references 'tables' by their alias through the
 *   'this' object. For example <code>this.score</code> will refer to the record
 *   that was declared to have the alias of 'score' (via 'as') in the
 *   directives.
 *   
 *   Performing 'WHERE' like actions
 *     The selector function is capable of handling 'where' clauses. By 
 *     returning null or undefined the record will be omitted from the result.
 *   
 *   Take note that the return value from the selector is pushed into an array
 *   and that array is what is returned from the compiled join function upon
 *   its invocation. 
 *   This has several powerful implications such as...
 *     - Returning 'this' causes the result record to have the same structure as
 *       'this' ('this' is cloned and pushed to the result set).
 *     - Returning a contrived anonymous object results in a set of records
 *       having whatever structure that object defines (e.g.
 *       <code>return {name: this.user.name, group: this.group.name};</code>)
 *     - Returning a string or other simple value causes the result record set
 *       to simply be a list of these primitives.
 *     - Returning null or undefined results in no value being pushed to the
 *       result set for this data combination.
 *     - Complex actions such as DOM manipulation can occur within the select
 *       function in addition to, or instead of, actually building a list of
 *       records.
 *   
 *   The default selector simply returns the full set of records ('this')
 *
 *   The selector may be changed after the function is compiled by setting the
 *   bound selector at foo.external.selector where foo is a compiled join 
 *   function. Changing the selector on a DataJoin object will not affect any
 *   previously compiled join functions.
 *   
 *   
 * The parse() method:
 *   The parse() method allows you to specify directives in a, human friendly,
 *   SQL like syntax consisting of the FROM and JOIN portions of an SQL
 *   statement.
 *  
 *   Example statement which may be passed to parse():
 *     FROM arg0 AS score
 *     LEFT JOIN arg1 AS grade   ON grade.id   = score.grade_id
 *     LEFT JOIN arg2 AS student ON student.id = score.student_id
 *     LEFT JOIN arg3 AS test    ON test.id    = score.test_id
 *  
 *  Notice:
 *    - see Directives notices
 *  
 * Usage example:
 *   Craeate instance: 
 *     <code>var jb = new DataJoin();</code>
 *
 *   Set directives in one of the following ways:
 *     <code>jb.directives = [
 *       { join: 'from' , arg: 0, as: 'score' },
 *       { join: 'left' , arg: 1, as: 'grade'  , on: { 'grade': 'id'  , 'score': 'grade_id' } },
 *       { join: 'inner', arg: 2, as: 'student', on: { 'student': 'id', 'score': 'student_id' } },
 *       { join: 'left' , arg: 3, as: 'test'   , on: { 'test': 'id'   , 'score': 'test_id' } } 
 *     ];</code>
 *   -- OR --
 *     <code>jb.parse(
 *       "FROM arg0 AS score " +
 *       "LEFT JOIN arg1 AS grade   ON grade.id   = score.grade_id " +
 *       "LEFT JOIN arg2 AS student ON student.id = score.student_id " +
 *       "LEFT JOIN arg3 AS test    ON test.id    = score.test_id "
 *     );</code>
 *
 *   Set the selector function:
 *     this selector will result in a set of records containing only test_score less than 70 
 *     <code>jb.selector = function(){ 
 *       if ( this.score.test_score >= 70 ) return null;
 *       return { student_name: student.name, grade: this.grade.letter, test_name: this.test.name };
 *     }</code>
 *
 *   Call .compile and either retain the function returned or reference via .exec later
 *
 * Calling the generated function:
 *   given lists of simple objects of the same name as aliased in the directive
 *   example call
 *     <code>var records = jb.exec( scores, grades, students, tests )</code>
 *
 * NOTICE
 *   - Directives must be listed in dependency order (if c->b->a then directive
 *     order must be a, b, c). This is true when setting directives using 
 *     either method (calling .parse or setting .directive).
 *   - Directive arguments can be in any order and be non-contiguous
 *   - The generated function is completely independent from the builder (once 
 *     compiled changing the selector will not change the selector used by the
 *     compiled function but the new selector will be used by any function as
 *     the product of calling compile again).
 *   - The directive value 'join' can be one of: from, left, or inner. one, and
 *     only one, 'from' is a required directive
 *   - Behavior of having multiple from statements is equivalent to performing 
 *     CROSS JOIN. 
 *   - Mixing CROSS joins with other join types may result in unexpected, but 
 *     deterministic, behavior if/when directive ordering is implemented in the
 *     future.